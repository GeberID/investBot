package org.invest.bot.core.messages;

import org.invest.invest.core.objects.InstrumentObj;
import org.springframework.stereotype.Component;
import ru.tinkoff.piapi.core.models.Money;
import ru.tinkoff.piapi.core.models.Portfolio;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.invest.bot.core.DataConvertUtility.getPercentCount;

@Component
public class MessageFormatter {
    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.
     *
     * @param accountName –ò–º—è —Å—á–µ—Ç–∞
     * @param instrumentObjs –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—á–µ—Ç–µ
     * @param filterType  –¢–∏–ø –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ("share", "bond", "all")
     * @return –ì–æ—Ç–æ–≤—ã–π –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    public String format(String accountName, List<InstrumentObj> instrumentObjs,
                         Portfolio portfolio, String filterType) {
        StringBuilder sb = new StringBuilder();
        sb.append("<b>\uD83D\uDDC3Ô∏è ").append(accountName).append("</b>\n\n");
        if (instrumentObjs.isEmpty()) {
            sb.append("–í —ç—Ç–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤.");
            return sb.toString();
        }
        Map<String, List<InstrumentObj>> groupedInstruments = instrumentObjs.stream()
                .collect(Collectors.groupingBy(InstrumentObj::getType));
        sb.append("<pre>");
        sb.append(String.format("%-14s %-8s %12s %12s\n", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å"));
        sb.append("--------------------------------------------------\n");
        for (Map.Entry<String, List<InstrumentObj>> entry : groupedInstruments.entrySet()) {
            String currentType = entry.getKey();
            if (!filterType.equals("all") && !currentType.equals(filterType)) {
                continue;
            }
            sb.append("\n<b>").append(getFriendlyTypeName(currentType)).append("</b>\n");
            for (InstrumentObj instrumentObj : entry.getValue()) {
                sb.append(formatInstrumentMultiLine(instrumentObj));
            }
        }
        sb.append("</pre>");
        sb.append(generateAllocationSummary(portfolio));
        return sb.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏.
     * 1-—è —Å—Ç—Ä–æ–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª-–≤–æ, –¶–µ–Ω–∞, –°—Ç–æ–∏–º–æ—Å—Ç—å.
     * 2-—è —Å—Ç—Ä–æ–∫–∞: –û—Ç—Å—Ç—É–ø –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–±—ã–ª–∏ (P/L).
     */
    private String formatInstrumentMultiLine(InstrumentObj instrumentObj) {
        StringBuilder sb = new StringBuilder();
        DecimalFormat qtyFormat = new DecimalFormat("#,###.##");
        DecimalFormat priceFormat = new DecimalFormat("#,##0.00");
        String name = instrumentObj.getName();
        if (name.length() > 13) {
            name = name.substring(0, 12) + ".";
        }
        String quantityStr = qtyFormat.format(instrumentObj.getQuantity());
        String priceStr = priceFormat.format(instrumentObj.getCurrentPrice().getValue())
                + getCurrencySymbol(instrumentObj.getCurrentPrice().getCurrency());
        String totalPriceStr = priceFormat.format(instrumentObj.getCurrentPrice().getValue()
                .multiply(instrumentObj.getQuantity())) + getCurrencySymbol(instrumentObj.getCurrentPrice().getCurrency());
        sb.append(String.format("%-14s %-8s %12s %12s\n", name, quantityStr, priceStr, totalPriceStr));
        BigDecimal profitValue = instrumentObj.getTotalProfit();
        Money averageBuyPrice = instrumentObj.getAverageBuyPrice();
        if (profitValue != null && profitValue.signum() != 0) {
            BigDecimal totalInvested = instrumentObj.getAverageBuyPrice().getValue().multiply(instrumentObj.getQuantity());
            BigDecimal profitPercentage = BigDecimal.ZERO;
            if (totalInvested.signum() != 0) {
                profitPercentage = profitValue.multiply(BigDecimal.valueOf(100))
                        .divide(totalInvested, 2, RoundingMode.HALF_UP);
            }
            String profitCurrencySymbol = getCurrencySymbol(averageBuyPrice.getCurrency());
            String profitStr = formatProfit(profitValue, profitCurrencySymbol);
            String percentageStr = formatPercentage(profitPercentage);
            sb.append(String.format("  ‚îî P/L: %s (%s)\n", profitStr, percentageStr));
        }
        return sb.toString();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
     */
    private String generateAllocationSummary(Portfolio portfolio) {
        Money totalValue = portfolio.getTotalAmountPortfolio();
        String currency = portfolio.getTotalAmountPortfolio().getCurrency();
        if (totalValue.getValue().signum() == 0) {
            return "";
        }
        StringBuilder summary = new StringBuilder();
        summary.append("\n<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:</b>\n");
        addAssetAllocationLine(summary, "–ê–∫—Ü–∏–∏ \uD83D\uDCC8", portfolio.getTotalAmountShares(), totalValue);
        addAssetAllocationLine(summary, "–û–±–ª–∏–≥–∞—Ü–∏–∏ \uD83D\uDCDC", portfolio.getTotalAmountBonds(), totalValue);
        addAssetAllocationLine(summary, "–§–æ–Ω–¥—ã \uD83D\uDDA5Ô∏è", portfolio.getTotalAmountEtfs(), totalValue);
        addAssetAllocationLine(summary, "–í–∞–ª—é—Ç–∞ \uD83D\uDCB0", portfolio.getTotalAmountCurrencies(), totalValue);
        addAssetAllocationLine(summary, "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: %s " + currency + "\n", totalValue.getValue());
        addAssetAllocationLine(summary, "<b>–ü—Ä–æ—Ñ–∏—Ç</b>: %s%%", portfolio.getExpectedYield());
        return summary.toString();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –ø–æ –µ–µ –∫–æ–¥—É
     */
    public String getCurrencySymbol(String currencyCode) {
        switch (currencyCode.toUpperCase()) {
            case "RUB":
                return "‚ÇΩ";
            case "USD":
                return "$";
            case "EUR":
                return "‚Ç¨";
            default:
                return " " + currencyCode;
        }
    }

    private void addAssetAllocationLine(StringBuilder sb, String name, Money amount, Money total) {
        if (amount != null && amount.getValue().signum() != 0) {
            sb.append(String.format("%-15s %s - %s%%\n", name + ":", amount.getValue()
                    .setScale(2, RoundingMode.HALF_UP), getPercentCount(total,amount)));
        }
    }

    private void addAssetAllocationLine(StringBuilder sb, String stringFormat, BigDecimal bigDecimal) {
        if (bigDecimal != null && bigDecimal.signum() != 0) {
            sb.append(String.format(stringFormat, bigDecimal.setScale(2, RoundingMode.HALF_UP)));
        }
    }

    private String getFriendlyTypeName(String instrumentType) {
        switch (instrumentType.toLowerCase()) {
            case "share":
                return "–ê–∫—Ü–∏–∏ \uD83D\uDCC8";
            case "bond":
                return "–û–±–ª–∏–≥–∞—Ü–∏–∏ \uD83D\uDCDC";
            case "etf":
                return "–§–æ–Ω–¥—ã \uD83D\uDDA5Ô∏è";
            case "currency":
                return "–í–∞–ª—é—Ç–∞ \uD83D\uDCB0";
            default:
                return "–ü—Ä–æ—á–µ–µ";
        }
    }

    private String formatProfit(BigDecimal value, String currencySymbol) {
        DecimalFormat profitFormat = new DecimalFormat("#,##0");
        String formattedValue = profitFormat.format(value);
        if (value.signum() > 0) {
            return "+" + formattedValue + currencySymbol;
        }
        return formattedValue + currencySymbol;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è—è –∑–Ω–∞–∫, —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª %.
     */
    private String formatPercentage(BigDecimal percentage) {
        String emoji = "";
        String sign = "";
        if (percentage.signum() > 0) {
            emoji = "\uD83D\uDCC8"; // üìà
            sign = "+";
        } else if (percentage.signum() < 0) {
            emoji = "\uD83D\uDCC9"; // üìâ
        }
        return String.format("%s%s%s%%", emoji, sign, percentage.abs());
    }
}
